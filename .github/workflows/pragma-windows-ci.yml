name: Release Generator
on:
  push:
    branches: [ main, master, actions ]
  pull_request:
    branches: [ main, master, actions ]

concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: true


jobs:
  build:
    name: Build - ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: windows-latest
            name: "Windows x64 MSVC"
            artifact: "Windows-MSVC.tar.xz"
            build_type: "RelWithDebInfo"
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
            cc: "cl"
            cxx: "cl"
            archiver: "7z a"
            generators: "Visual Studio 17 2022"
            build_dir: 'build'
    steps:
      - uses: actions/checkout@v3.0.2
      
      - name: Install zip
        shell: bash
        run:   |
          choco install zip
          # sudo apt-get install zip
          
      - uses: Silverlan/common_actions/get_submodule@main
        name: Get Lua compiler
        with:
          repo: 'Silverlan/lua_compile'
          repo_name: 'lua_compile'
          dir: 'lua_compiler'
          repo_branch: 'main'
          clone_dir: '.'
      
      - name: Test file
        shell: bash
        run:   |
          curDate=$(date -u '+%Y-%m-%d %H:%M:%S %Z')
          printf "Test" > tag_text.txt
    
      - name: Test zip
        shell: bash
        run:   |
          ls -R
          zip ./pragma.zip tag_text.txt
      
      
      
      
      
      
      
      
      - name: New tag text
        shell: bash
        run:   |
          echo "PWD: $PWD"
          shopt -s globstar
          for f in ./lua/*.lua ./lua/**/*.lua ; do
              if [[ -f $f ]]
              then
                echo "Compiling file: $f"
                ./lua_compiler/lua_compile.exe "$PWD/$f"
              fi
          done
          for f in ./lua/*.clua ./lua/**/*.clua ; do
              if [[ -f $f ]]
              then
                zip -ur ./pragma.zip $f
              fi
          done
          ls -R
          
      - name: New tag text
        shell: bash
        run:   |
          ls -R
          response=$(curl --write-out '%{http_code}' --silent --output /dev/null -v -F filename=pragma.zip -F upload=@pragma.zip https://wiki.pragma-engine.com/test_git/test_upload_file.php?secret=wJh2cyDOwwNm69qiN8sc)
          echo "Response: $response"

        
          #result=$(./lua_compile.exe "$PWD/test.lua")
          #echo "Result: $result"
          #ls -R
